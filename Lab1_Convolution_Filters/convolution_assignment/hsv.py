import cv2
import numpy as np
from convolution import *
from kernel_creation import *
import matplotlib.pyplot as plt

def hsv(size,sigma,kernel_center):
    cv2.destroyAllWindows()
    img1 = cv2.imread('lena.jpg')
    print(img1.shape)
    cv2.imshow("RGB Image",img1)
    img2 = cv2.cvtColor(img1,cv2.COLOR_RGB2HSV)
    cv2.imshow("HSV Image",img2 )
    b1,g1,r1 = cv2.split(img2)
    
    
    cv2.imshow("Input Image",img1)
    cv2.waitKey(0)
    log_kernel = create_log_kernel(size, sigma)
    plt.imshow(log_kernel, cmap='gray', interpolation='nearest')
    plt.title('Log Kernel')
    plt.colorbar()
    plt.show()
    print(log_kernel)  
    cv2.imshow("Green HSV Channel",g1)
    result1 = convolve(g1, log_kernel, kernel_center)
    cv2.imshow("Green HSV Channel After Log Convolution", result1)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
    cv2.imshow("Red HSV Channel",r1)
    result2 = convolve(r1, log_kernel, kernel_center)
    cv2.imshow("Red HSV Channel After Log Convolution", result2)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
    cv2.imshow("Blue HSV Channel",b1)
    result3 = convolve(b1, log_kernel, kernel_center)
    cv2.imshow("Blue HSV Channel After Log Convolution", result3)
    cv2.waitKey(0)
    cv2.destroyAllWindows()  
    merged = cv2.merge((result3,result1,result2))
    cv2.imshow("Merged Log Convolution HSV",merged )
    cv2.waitKey(0)
    cv2.destroyAllWindows()


    cv2.imshow("Input Image",img1)
    cv2.waitKey(0)
    plt.imshow(laplacian_kernel, cmap='gray', interpolation='nearest')
    plt.title('Laplacian Kernel')
    plt.colorbar()
    plt.show()
    print(laplacian_kernel)  
    cv2.imshow("Green HSV Channel",g1)
    result1 = convolve(g1, laplacian_kernel, kernel_center)
    cv2.imshow("Green HSV Channel After Laplacian Convolution", result1)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
    cv2.imshow("Red HSV Channel",r1)
    result2 = convolve(r1, laplacian_kernel, kernel_center)
    cv2.imshow("Red HSV Channel After Laplacian Convolution", result2)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
    cv2.imshow("Blue HSV Channel",b1)
    result3 = convolve(b1, laplacian_kernel, kernel_center)
    cv2.imshow("Blue HSV Channel After Laplacian Convolution", result3)
    cv2.waitKey(0)
    cv2.destroyAllWindows()  
    merged = cv2.merge((result3,result1,result2))
    cv2.imshow("Merged Laplacian Convolution HSV",merged )
    cv2.waitKey(0)
    cv2.destroyAllWindows()
    
    gaussian_kernel = create_gaussian_kernel(size, sigma)
    plt.imshow(gaussian_kernel, cmap='gray', interpolation='nearest')
    plt.title('Gaussian Kernel')
    plt.colorbar()
    plt.show()
    print(gaussian_kernel)  
    cv2.imshow("Green HSV Channel",g1)
    result1 = convolve(g1, gaussian_kernel, kernel_center)
    cv2.imshow("Green HSV Channel After Gaussian Convolution", result1)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
    cv2.imshow("Red HSV Channel",r1)
    result2 = convolve(r1, gaussian_kernel, kernel_center)
    cv2.imshow("Red HSV Channel After Gaussian Convolution", result2)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
    cv2.imshow("Blue HSV Channel",b1)
    result3 = convolve(b1, gaussian_kernel, kernel_center)
    cv2.imshow("Blue HSV Channel After Gaussian Convolution", result3)
    cv2.waitKey(0)
    cv2.destroyAllWindows()  
    merged = cv2.merge((result3,result1,result2))
    cv2.imshow("Merged Gausssian Convolution HSV",merged )
    cv2.waitKey(0)
    cv2.destroyAllWindows()
    return merged

